clear
clc

s_D = 7;
inputMaxVal=31;

set_light_2in = {'01', '02', '03', '04', '05', '06', '07', '0a', '0b', '14', '1a', '1b', '1c'};
set_light_3in = {'08', '09'};
set_light_1in = {'15'};
set_heavy_2in = {'10', '11', '12', '13', '16', '17', '18', '1d'};
set_heavy_1in = {'19'};
set_hash = {'20'};

set_lights = [set_light_1in set_light_2in set_light_3in];
set_heavys = [set_heavy_1in set_heavy_2in];

set_samples = {'01', '02', '03', '04', '20', '05', '06', '07', '08', '09', '0a', '0b', '10', };

set_1ins = [set_light_1in set_heavy_1in];
set_2ins = [set_light_2in set_heavy_2in set_hash];
set_3ins = [set_light_3in];

oplist = [set_lights(randi(length(set_lights),1,s_D-2)) set_heavys(randi(length(set_heavys),1,1))];
oplist = [oplist(randperm(length(oplist))) '20'];

bytecode = {};
NStacks=0;
for i=1:s_D
    thisOp = oplist{i};
    d = 1*ismember(thisOp, set_1ins)+2*ismember(thisOp, set_2ins)+3*ismember(thisOp, set_3ins); 
    a = 1;
    if ~ismember(thisOp, set_hash)
        while NStacks < d
            bytecode = [bytecode '60'];
            bytecode = [bytecode lower(dec2hex(randi(inputMaxVal, 1),2))];
            NStacks = NStacks+1;
        end
        bytecode = [bytecode thisOp];
        NStacks = NStacks-d+a;
        
        %%%%%% to avoid zero inputs
        while NStacks < 2
            bytecode = [bytecode '60'];
            bytecode = [bytecode lower(dec2hex(randi(inputMaxVal, 1),2))];
            NStacks = NStacks+1;
        end
        bytecode = [bytecode '01'];
        NStacks = NStacks-2+1;
        i=i+1;
    else
        addr = lower(dec2hex(randi(inputMaxVal, 1),2));
        if NStacks < 2
            bytecode = [bytecode '60'];
            bytecode = [bytecode addr];
            NStacks = NStacks+1;
            if NStacks < 2
                error('not enough stack items')
            end
        end
        bytecode = [bytecode '52'];
        NStacks = NStacks-2;
        bytecode = [bytecode '60' '00' '60' lower(dec2hex(hex2dec(addr)+32)) '52']; % No NStack change
        bytecode = [bytecode '60' lower(dec2hex(64,2)) '60' addr];        
        NStacks = NStacks+2;
        bytecode = [bytecode thisOp];
        NStacks = NStacks-d+a;
    end
end
bytecode = [bytecode '00'];

strBytecode = ['0x' cell2mat(bytecode)];
fID = fopen('test_program\bytes_test_program.txt', 'w');
fwrite(fID, strBytecode);
fclose(fID);



